// Code generated by counterfeiter. DO NOT EDIT.
package dbadminfakes

import (
	"sync"

	"github.com/app-sre/dba-operator/pkg/dbadmin"
)

type FakeMigrationEngine struct {
	GetVersionQueryStub        func() string
	getVersionQueryMutex       sync.RWMutex
	getVersionQueryArgsForCall []struct {
	}
	getVersionQueryReturns struct {
		result1 string
	}
	getVersionQueryReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMigrationEngine) GetVersionQuery() string {
	fake.getVersionQueryMutex.Lock()
	ret, specificReturn := fake.getVersionQueryReturnsOnCall[len(fake.getVersionQueryArgsForCall)]
	fake.getVersionQueryArgsForCall = append(fake.getVersionQueryArgsForCall, struct {
	}{})
	fake.recordInvocation("GetVersionQuery", []interface{}{})
	fake.getVersionQueryMutex.Unlock()
	if fake.GetVersionQueryStub != nil {
		return fake.GetVersionQueryStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getVersionQueryReturns
	return fakeReturns.result1
}

func (fake *FakeMigrationEngine) GetVersionQueryCallCount() int {
	fake.getVersionQueryMutex.RLock()
	defer fake.getVersionQueryMutex.RUnlock()
	return len(fake.getVersionQueryArgsForCall)
}

func (fake *FakeMigrationEngine) GetVersionQueryCalls(stub func() string) {
	fake.getVersionQueryMutex.Lock()
	defer fake.getVersionQueryMutex.Unlock()
	fake.GetVersionQueryStub = stub
}

func (fake *FakeMigrationEngine) GetVersionQueryReturns(result1 string) {
	fake.getVersionQueryMutex.Lock()
	defer fake.getVersionQueryMutex.Unlock()
	fake.GetVersionQueryStub = nil
	fake.getVersionQueryReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeMigrationEngine) GetVersionQueryReturnsOnCall(i int, result1 string) {
	fake.getVersionQueryMutex.Lock()
	defer fake.getVersionQueryMutex.Unlock()
	fake.GetVersionQueryStub = nil
	if fake.getVersionQueryReturnsOnCall == nil {
		fake.getVersionQueryReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getVersionQueryReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeMigrationEngine) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getVersionQueryMutex.RLock()
	defer fake.getVersionQueryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMigrationEngine) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dbadmin.MigrationEngine = new(FakeMigrationEngine)
